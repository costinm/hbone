syntax = "proto3";

package xds;
option go_package="github.com/costinm/hbone/ext/uxds/xds";
option java_generic_services = true;

import "xds/base.proto";
import "xds/envoy_base.proto";


message Listener {
    // The unique name by which this listener is known. If no name is provided,
    // Envoy will allocate an internal UUID for the listener. If the listener is to be dynamically
    // updated or removed via :ref:`LDS <config_listeners_lds>` a unique name must be provided.
    // By default, the maximum length of a listener's name is limited to 60 characters. This limit can
    // be increased by setting the :option:`--max-obj-name-len` command line argument to the desired
    // value.
    string name = 1;

    // The address that the listener should listen on. In general, the address must be unique, though
    // that is governed by the bind rules of the OS. E.g., multiple listeners can listen on port 0 on
    // Linux as the actual port will be allocated by the OS.
    Address address = 2;

    // A list of filter chains to consider for this listener. The
    // :ref:`FilterChain <envoy_api_msg_listener.FilterChain>` with the most specific
    // :ref:`FilterChainMatch <envoy_api_msg_listener.FilterChainMatch>` criteria is used on a
    // connection.
    //
    // .. attention::
    //
    //   In the current version, multiple filter chains are supported **only** so that SNI can be
    //   configured. See the :ref:`FAQ entry <faq_how_to_setup_sni>` on how to configure SNI for more
    //   information. When multiple filter chains are configured, each filter chain must have an
    //   **identical** set of :ref:`filters <envoy_api_field_listener.FilterChain.filters>`. If the
    //   filters differ, the configuration will fail to load. In the future, this limitation will be
    //   relaxed such that different filters can be used depending on which filter chain matches
    //   (based on SNI or some other parameter).
    repeated FilterChain filter_chains = 3;

    // If a connection is redirected using *iptables*, the port on which the proxy
    // receives it might be different from the original destination address. When this flag is set to
    // true, the listener hands off redirected connections to the listener associated with the
    // original destination address. If there is no listener associated with the original destination
    // address, the connection is handled by the listener that receives it. Defaults to false.
    //
    // .. attention::
    //
    //   This field is deprecated. Use :ref:`an original_dst <config_listener_filters_original_dst>`
    //   :ref:`listener filter <envoy_api_field_Listener.listener_filters>` instead.
    //
    //   Note that hand off to another listener is *NOT* performed without this flag. Once
    //   :ref:`FilterChainMatch <envoy_api_msg_listener.FilterChainMatch>` is implemented this flag
    //   will be removed, as filter chain matching can be used to select a filter chain based on the
    //   restored destination address.
    BoolValue use_original_dst = 4 [deprecated = true];

    // Soft limit on size of the listener’s new connection read and write buffers.
    // If unspecified, an implementation defined default is applied (1MiB).
    UInt32Value per_connection_buffer_limit_bytes = 5;

    // Listener metadata.
    Metadata metadata = 6;

    // [#not-implemented-hide:]
    message DeprecatedV1 {
        // Whether the listener should bind to the port. A listener that doesn’t
        // bind can only receive connections redirected from other listeners that
        // set use_original_dst parameter to true. Default is true.
        //
        // [V2-API-DIFF] This is deprecated in v2, all Listeners will bind to their
        // port. An additional filter chain must be created for every original
        // destination port this listener may redirect to in v2, with the original
        // port specified in the FilterChainMatch destination_port field.
        BoolValue bind_to_port = 1;
    }

    // [#not-implemented-hide:]
    DeprecatedV1 deprecated_v1 = 7;

    enum DrainType {
        // Drain in response to calling /healthcheck/fail admin endpoint (along with the health check
        // filter), listener removal/modification, and hot restart.
        DEFAULT = 0;
        // Drain in response to listener removal/modification and hot restart. This setting does not
        // include /healthcheck/fail. This setting may be desirable if Envoy is hosting both ingress
        // and egress listeners.
        MODIFY_ONLY = 1;
    }

    // The type of draining to perform at a listener-wide level.
    DrainType drain_type = 8;

    // Listener filters have the opportunity to manipulate and augment the connection metadata that
    // is used in connection filter chain matching, for example. These filters are run before any in
    // :ref:`filter_chains <envoy_api_field_Listener.filter_chains>`. Order matters as the
    // filters are processed sequentially right after a socket has been accepted by the listener, and
    // before a connection is created.
    //repeated ListenerFilter listener_filters = 9;

    // Whether the listener should be set as a transparent socket. When this flag is set to true,
    // connections can be redirected to the listener using an *iptables* *TPROXY* target, in which
    // case the original source and destination addresses and ports are preserved on accepted
    // connections. Requires Envoy to run with the *CAP_NET_ADMIN* capability. Defaults to false.
    bool transparent = 10;
}

// A filter chain wraps a set of match criteria, an option TLS context, a set of filters, and
// various other parameters.
message FilterChain {
    // The criteria to use when matching a connection to this filter chain.
    FilterChainMatch filter_chain_match = 1;

    // The TLS context for this filter chain.
    DownstreamTlsContext tls_context = 2;

    // A list of individual network filters that make up the filter chain for
    // connections established with the listener. Order matters as the filters are
    // processed sequentially as connection events happen. Note: If the filter
    // list is empty, the connection will close by default.
    repeated Filter filters = 3;

    // Whether the listener should expect a PROXY protocol V1 header on new
    // connections. If this option is enabled, the listener will assume that that
    // remote address of the connection is the one specified in the header. Some
    // load balancers including the AWS ELB support this option. If the option is
    // absent or set to false, Envoy will use the physical peer address of the
    // connection as the remote address.
    BoolValue use_proxy_proto = 4;

    // [#not-implemented-hide:] filter chain metadata.
    Metadata metadata = 5;

    // See :ref:`base.TransportSocket<envoy_api_msg_core.TransportSocket>` description.
    TransportSocket transport_socket = 6;
}

// Specifies the match criteria for selecting a specific filter chain for a
// listener.
message FilterChainMatch {
    // If non-empty, the SNI domains to consider. May contain a wildcard prefix,
    // e.g. ``*.example.com``.
    //
    // .. attention::
    //
    //   See the :ref:`FAQ entry <faq_how_to_setup_sni>` on how to configure SNI for more
    //   information.
    repeated string sni_domains = 1;

    // If non-empty, an IP address and prefix length to match addresses when the
    // listener is bound to 0.0.0.0/:: or when use_original_dst is specified.
    // [#not-implemented-hide:]
    repeated CidrRange prefix_ranges = 3;

    // If non-empty, an IP address and suffix length to match addresses when the
    // listener is bound to 0.0.0.0/:: or when use_original_dst is specified.
    // [#not-implemented-hide:]
    string address_suffix = 4;

    // [#not-implemented-hide:]
    UInt32Value suffix_len = 5;

    // The criteria is satisfied if the source IP address of the downstream
    // connection is contained in at least one of the specified subnets. If the
    // parameter is not specified or the list is empty, the source IP address is
    // ignored.
    // [#not-implemented-hide:]
    repeated CidrRange source_prefix_ranges = 6;

    // The criteria is satisfied if the source port of the downstream connection
    // is contained in at least one of the specified ports. If the parameter is
    // not specified, the source port is ignored.
    // [#not-implemented-hide:]
    repeated UInt32Value source_ports = 7;

    // Optional destination port to consider when use_original_dst is set on the
    // listener in determining a filter chain match.
    // [#not-implemented-hide:]
    UInt32Value destination_port = 8;
}


message DownstreamTlsContext {
    // Common TLS context settings.
    CommonTlsContext common_tls_context = 1;

    // If specified, Envoy will reject connections without a valid client
    // certificate.
    BoolValue require_client_certificate = 2;

    // If specified, Envoy will reject connections without a valid and matching SNI.
    // [#not-implemented-hide:]
    BoolValue require_sni = 3;

    //    oneof session_ticket_keys_type {
    //        // TLS session ticket key settings.
    //        TlsSessionTicketKeys session_ticket_keys = 4;
    //
    //        // [#not-implemented-hide:]
    //        SdsSecretConfig session_ticket_keys_sds_secret_config = 5;
    //    }
}

// TLS context shared by both client and server TLS contexts.
message CommonTlsContext {
    // TLS protocol versions, cipher suites etc.
    TlsParameters tls_params = 1;

    // Multiple TLS certificates can be associated with the same context.
    // E.g. to allow both RSA and ECDSA certificates, two TLS certificates can be configured.
    //
    // .. attention::
    //
    //   Although this is a list, currently only a single certificate is supported. This will be
    //   relaxed in the future.
    repeated TlsCertificate tls_certificates = 2;

    // [#not-implemented-hide:]
    //repeated SdsSecretConfig tls_certificate_sds_secret_configs = 6;

    // How to validate peer certificates.
    CertificateValidationContext validation_context = 3;

    // Supplies the list of ALPN protocols that the listener should expose. In
    // practice this is likely to be set to one of two values (see the
    // :ref:`codec_type <config_http_conn_man_codec_type>` parameter in the HTTP connection
    // manager for more information):
    //
    // * "h2,http/1.1" If the listener is going to support both HTTP/2 and HTTP/1.1.
    // * "http/1.1" If the listener is only going to support HTTP/1.1.
    //
    // There is no default for this parameter. If empty, Envoy will not expose ALPN.
    repeated string alpn_protocols = 4;

    // These fields are deprecated and only are used during the interim v1 -> v2
    // transition period for internal purposes. They should not be used outside of
    // the Envoy binary. [#not-implemented-hide:]
    message DeprecatedV1 {
        string alt_alpn_protocols = 1;
    }

    // [#not-implemented-hide:]
    DeprecatedV1 deprecated_v1 = 5 [deprecated = true];
}

message CertificateValidationContext {
    // TLS certificate data containing certificate authority certificates to use in verifying
    // a presented peer certificate (e.g. server certificate for clusters or client certificate
    // for listeners). If not specified and a peer certificate is presented it will not be
    // verified. By default, a client certificate is optional, unless one of the additional
    // options (:ref:`require_client_certificate
    // <envoy_api_field_auth.DownstreamTlsContext.require_client_certificate>`,
    // :ref:`verify_certificate_hash
    // <envoy_api_field_auth.CertificateValidationContext.verify_certificate_hash>`, or
    // :ref:`verify_subject_alt_name
    // <envoy_api_field_auth.CertificateValidationContext.verify_subject_alt_name>`) is also
    // specified.
    //
    // See :ref:`the TLS overview <arch_overview_ssl_enabling_verification>` for a list of common
    // system CA locations.
    DataSource trusted_ca = 1;

    // If specified, Envoy will verify (pin) the hex-encoded SHA-256 hash of
    // the presented certificate.
    repeated string verify_certificate_hash = 2;

    // If specified, Envoy will verify (pin) base64-encoded SHA-256 hash of
    // the Subject Public Key Information (SPKI) of the presented certificate.
    // This is the same format as used in HTTP Public Key Pinning.
    // [#not-implemented-hide:]
    repeated string verify_spki_sha256 = 3;

    // An optional list of subject alternative names. If specified, Envoy will verify that
    // the certificate’s subject alternative name matches one of the specified values.
    repeated string verify_subject_alt_name = 4;

    // [#not-implemented-hide:] Must present a signed time-stamped OCSP response.
    BoolValue require_ocsp_staple = 5;

    // [#not-implemented-hide:] Must present signed certificate time-stamp.
    BoolValue require_signed_certificate_timestamp = 6;

    // An optional `certificate revocation list
    // <http://https://en.wikipedia.org/wiki/Certificate_revocation_list>`_
    // (in PEM format). If specified, Envoy will verify that the presented peer
    // certificate has not been revoked by this CRL. If this DataSource contains
    // multiple CRLs, all of them will be used.
    DataSource crl = 7;
}


message TlsCertificate {
    // The TLS certificate chain.
    DataSource certificate_chain = 1;

    // The TLS private key.
    DataSource private_key = 2;

    // [#not-implemented-hide:]
    DataSource password = 3;

    // [#not-implemented-hide:]
    DataSource ocsp_staple = 4;

    // [#not-implemented-hide:]
    repeated DataSource signed_certificate_timestamp = 5;
}

// Data source consisting of either a file or an inline value.
message DataSource {
    oneof specifier {

        // Local filesystem data source.
        string filename = 1;

        // Bytes inlined in the configuration.
        bytes inline_bytes = 2;

        // String inlined in the configuration.
        string inline_string = 3;
    }
}


message TlsParameters {
    enum TlsProtocol {
        // Envoy will choose the optimal TLS version.
        TLS_AUTO = 0;

        // TLS 1.0
        TLSv1_0 = 1;

        // TLS 1.1
        TLSv1_1 = 2;

        // TLS 1.2
        TLSv1_2 = 3;

        // TLS 1.3
        TLSv1_3 = 4;
    }

    // Minimum TLS protocol version.
    TlsProtocol tls_minimum_protocol_version = 1;

    // Maximum TLS protocol version.
    TlsProtocol tls_maximum_protocol_version = 2;

    // If specified, the TLS listener will only support the specified `cipher list
    // <https://commondatastorage.googleapis.com/chromium-boringssl-docs/ssl.h.html#Cipher-suite-configuration>`_.
    // If not specified, the default list:
    //
    // .. code-block:: none
    //
    //   [ECDHE-ECDSA-AES128-GCM-SHA256|ECDHE-ECDSA-CHACHA20-POLY1305]
    //   [ECDHE-RSA-AES128-GCM-SHA256|ECDHE-RSA-CHACHA20-POLY1305]
    //   ECDHE-ECDSA-AES128-SHA256
    //   ECDHE-RSA-AES128-SHA256
    //   ECDHE-ECDSA-AES128-SHA
    //   ECDHE-RSA-AES128-SHA
    //   AES128-GCM-SHA256
    //   AES128-SHA256
    //   AES128-SHA
    //   ECDHE-ECDSA-AES256-GCM-SHA384
    //   ECDHE-RSA-AES256-GCM-SHA384
    //   ECDHE-ECDSA-AES256-SHA384
    //   ECDHE-RSA-AES256-SHA384
    //   ECDHE-ECDSA-AES256-SHA
    //   ECDHE-RSA-AES256-SHA
    //   AES256-GCM-SHA384
    //   AES256-SHA256
    //   AES256-SHA
    //
    // will be used.
    repeated string cipher_suites = 3;

    // If specified, the TLS connection will only support the specified ECDH
    // curves. If not specified, the default curves (X25519, P-256) will be used.
    repeated string ecdh_curves = 4;
}
