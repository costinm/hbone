syntax = "proto3";

package xds;
option go_package="github.com/costinm/hbone/ext/uxds/xds";
option java_generic_services = true;


import "xds/base.proto";

// Identifies location of where either Envoy runs or where upstream hosts run.
message Locality {
    // Region this :ref:`zone <envoy_api_field_core.Locality.zone>` belongs to.
    string region = 1;

    // Defines the local service zone where Envoy is running. Though optional, it
    // should be set if discovery service routing is used and the discovery
    // service exposes :ref:`zone data <config_cluster_manager_sds_api_host_az>`,
    // either in this message or via :option:`--service-zone`. The meaning of zone
    // is context dependent, e.g. `Availability Zone (AZ)
    // <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html>`_
    // on AWS, `Zone <https://cloud.google.com/compute/docs/regions-zones/>`_ on
    // GCP, etc.
    string zone = 2;

    // When used for locality of upstream hosts, this field further splits zone
    // into smaller chunks of sub-zones so they can be load balanced
    // independently.
    string sub_zone = 3;
}

message SocketAddress {
    enum Protocol {
        TCP = 0;
        // [#not-implemented-hide:]
        UDP = 1;
    }
    Protocol protocol = 1;
    // The address for this socket. :ref:`Listeners <config_listeners>` will bind
    // to the address or outbound connections will be made. An empty address is
    // not allowed, specify ``0.0.0.0`` or ``::`` to bind any. It's still possible to
    // distinguish on an address via the prefix/suffix matching in
    // FilterChainMatch after connection. For :ref:`clusters
    // <config_cluster_manager_cluster>`, an address may be either an IP or
    // hostname to be resolved via DNS. If it is a hostname, :ref:`resolver_name
    // <envoy_api_field_core.SocketAddress.resolver_name>` should be set unless default
    // (i.e. DNS) resolution is expected.
    string address = 2;
    oneof port_specifier {
        uint32 port_value = 3;
        // This is only valid if :ref:`resolver_name
        // <envoy_api_field_core.SocketAddress.resolver_name>` is specified below and the
        // named resolver is capable of named port resolution.
        string named_port = 4;
    }
    // The name of the resolver. This must have been registered with Envoy. If this is
    // empty, a context dependent default applies. If address is a hostname this
    // should be set for resolution other than DNS. If the address is a concrete
    // IP address, no resolution will occur.
    string resolver_name = 5;

    // When binding to an IPv6 address above, this enables `IPv4 compatibity
    // <https://tools.ietf.org/html/rfc3493#page-11>`_. Binding to ``::`` will
    // allow both IPv4 and IPv6 connections, with peer IPv4 addresses mapped into
    // IPv6 space as ``::FFFF:<IPv4-address>``.
    bool ipv4_compat = 6;
}

// Metadata provides additional inputs to filters based on matched listeners,
// filter chains, routes and endpoints. It is structured as a map from filter
// name (in reverse DNS format) to metadata specific to the filter. Metadata
// key-values for a filter are merged as connection and request handling occurs,
// with later values for the same key overriding earlier values.
//
// An example use of metadata is providing additional values to
// http_connection_manager in the envoy.http_connection_manager.access_log
// namespace.
//
// For load balancing, Metadata provides a means to subset cluster endpoints.
// Endpoints have a Metadata object associated and routes contain a Metadata
// object to match against. There are some well defined metadata used today for
// this purpose:
//
// * ``{"envoy.lb": {"canary": <bool> }}`` This indicates the canary status of an
//   endpoint and is also used during header processing
//   (x-envoy-upstream-canary) and for stats purposes.
message Metadata {
    // Key is the reverse DNS filter name, e.g. com.acme.widget. The envoy.*
    // namespace is reserved for Envoy's built-in filters.
    map<string, Struct> filter_metadata = 1;
}

// Addresses specify either a logical or physical address and port, which are
// used to tell Envoy where to bind/listen, connect to upstream and find
// management servers.
message Address {
    oneof address {
        SocketAddress socket_address = 1;
        Pipe pipe = 2;
    }
}

message Pipe {
    // Unix Domain Socket path. On Linux, paths starting with '@' will use the
    // abstract namespace. The starting '@' is replaced by a null byte by Envoy.
    // Paths starting with '@' will result in an error in environments other than
    // Linux.
    string path = 1;
}


message BindConfig {
    // The address to bind to when creating a socket.
    SocketAddress source_address = 1;
}

// CidrRange specifies an IP Address and a prefix length to construct
// the subnet mask for a `CIDR <https://tools.ietf.org/html/rfc4632>`_ range.
message CidrRange {
    // IPv4 or IPv6 address, e.g. ``192.0.0.0`` or ``2001:db8::``.
    string address_prefix = 1;
    // Length of prefix, e.g. 0, 32.
    UInt32Value prefix_len = 2;
}

// Configuration for transport socket in :ref:`listeners <config_listeners>` and
// :ref:`clusters <config_cluster_manager_cluster>`. If the configuration is
// empty, a default transport socket implementation and configuration will be
// chosen based on the platform and existence of tls_context.
message TransportSocket {
    // The name of the transport socket to instantiate. The name must match a supported transport
    // socket implementation.
    string name = 1;

    // Implementation specific configuration which depends on the implementation being instantiated.
    // See the supported transport socket implementations for further documentation.
    Struct config = 2;
}

message Filter {
    // The name of the filter to instantiate. The name must match a supported
    // filter. The built-in filters are:
    //
    // [#comment:TODO(mattklein123): Auto generate the following list]
    // * :ref:`envoy.client_ssl_auth<config_network_filters_client_ssl_auth>`
    // * :ref:`envoy.echo <config_network_filters_echo>`
    // * :ref:`envoy.http_connection_manager <config_http_conn_man>`
    // * :ref:`envoy.mongo_proxy <config_network_filters_mongo_proxy>`
    // * :ref:`envoy.ratelimit <config_network_filters_rate_limit>`
    // * :ref:`envoy.redis_proxy <config_network_filters_redis_proxy>`
    // * :ref:`envoy.tcp_proxy <config_network_filters_tcp_proxy>`
    string name = 1;

    // Filter specific configuration which depends on the filter being
    // instantiated. See the supported filters for further documentation.
    //Struct config = 2;

    oneof config_type {
        // Filter specific configuration which depends on the filter being
        // instantiated. See the supported filters for further documentation.
        Any typed_config = 4;

        // Configuration source specifier for an extension configuration discovery
        // service. In case of a failure and without the default configuration, the
        // listener closes the connections.
        // [#not-implemented-hide:]
        //ExtensionConfigSource config_discovery = 5;
    }

    // [#not-implemented-hide:]
    message DeprecatedV1 {
        string type = 1;
    }

    // [#not-implemented-hide:]
    DeprecatedV1 deprecated_v1 = 3 [deprecated = true];
}

// CDS filter uses Any ? Original also uses Filter name
message ClusterFilter {

    // The name of the filter to instantiate. The name must match a
    // :ref:`supported filter <config_network_filters>`.
    string name = 1;

    // Filter specific configuration which depends on the filter being
    // instantiated. See the supported filters for further documentation.
    Any typed_config = 2;
}


// Configuration for :ref:`listeners <config_listeners>`, :ref:`clusters
// <config_cluster_manager>`, :ref:`routes
// <envoy_api_msg_config.route.v3.RouteConfiguration>`, :ref:`endpoints
// <arch_overview_service_discovery>` etc. may either be sourced from the
// filesystem or from an xDS API source. Filesystem configs are watched with
// inotify for updates.
// [#next-free-field: 8]
message ConfigSource {

    // Authorities that this config source may be used for. An authority specified in a xdstp:// URL
    // is resolved to a *ConfigSource* prior to configuration fetch. This field provides the
    // association between authority name and configuration source.
    // [#not-implemented-hide:]
    //repeated xds.core.v3.Authority authorities = 7;

    oneof config_source_specifier {

        // Path on the filesystem to source and watch for configuration updates.
        // When sourcing configuration for :ref:`secret <envoy_api_msg_extensions.transport_sockets.tls.v3.Secret>`,
        // the certificate and key files are also watched for updates.
        //
        // .. note::
        //
        //  The path to the source must exist at config load time.
        //
        // .. note::
        //
        //   Envoy will only watch the file path for *moves.* This is because in general only moves
        //   are atomic. The same method of swapping files as is demonstrated in the
        //   :ref:`runtime documentation <config_runtime_symbolic_link_swap>` can be used here also.
        string path = 1;

        // API configuration source.
        //ApiConfigSource api_config_source = 2;

        // When set, ADS will be used to fetch resources. The ADS API configuration
        // source in the bootstrap configuration is used.
        AggregatedConfigSource ads = 3;

        // [#not-implemented-hide:]
        // When set, the client will access the resources from the same server it got the
        // ConfigSource from, although not necessarily from the same stream. This is similar to the
        // :ref:`ads<envoy_api_field.ConfigSource.ads>` field, except that the client may use a
        // different stream to the same server. As a result, this field can be used for things
        // like LRS that cannot be sent on an ADS stream. It can also be used to link from (e.g.)
        // LDS to RDS on the same server without requiring the management server to know its name
        // or required credentials.
        // [#next-major-version: In xDS v3, consider replacing the ads field with this one, since
        // this field can implicitly mean to use the same stream in the case where the ConfigSource
        // is provided via ADS and the specified data can also be obtained via ADS.]
        //SelfConfigSource self = 5;
    }

    // When this timeout is specified, Envoy will wait no longer than the specified time for first
    // config response on this xDS subscription during the :ref:`initialization process
    // <arch_overview_initialization>`. After reaching the timeout, Envoy will move to the next
    // initialization phase, even if the first config is not delivered yet. The timer is activated
    // when the xDS API subscription starts, and is disarmed on first config update or on error. 0
    // means no timeout - Envoy will wait indefinitely for the first xDS config (unless another
    // timeout applies). The default is 15s.
    Duration initial_fetch_timeout = 4;

    // API version for xDS resources. This implies the type URLs that the client
    // will request for resources and the resource type that the client will in
    // turn expect to be delivered.
    //ApiVersion resource_api_version = 6 [(validate.rules).enum = {defined_only: true}];
}

message AggregatedConfigSource {
}


